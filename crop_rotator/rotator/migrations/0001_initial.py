# Generated by Django 3.1.5 on 2021-04-03 08:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('name_pl', models.CharField(max_length=150, null=True)),
                ('name_en', models.CharField(max_length=150, null=True)),
                ('latin_name', models.CharField(blank=True, max_length=150, null=True)),
                ('descr', models.CharField(blank=True, max_length=500, null=True)),
                ('descr_pl', models.CharField(blank=True, max_length=500, null=True)),
                ('descr_en', models.CharField(blank=True, max_length=500, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('pubdate', models.DateTimeField(blank=True, null=True)),
                ('culture_override', models.PositiveSmallIntegerField(choices=[(0, 'Domyślnie dla Rodziny'), (1, 'Poprawia Jakość Gleby'), (2, 'Pogarsza Jakość Gleby'), (3, 'Neutralna Dla Jakości Gleby')], default=0)),
                ('cooldown_min_override', models.IntegerField(blank=True, null=True)),
                ('cooldown_max_override', models.IntegerField(blank=True, null=True)),
                ('is_demanding', models.BooleanField(default=False)),
                ('is_deep_roots', models.BooleanField(default=False)),
                ('is_leaves_mess', models.BooleanField(default=False)),
                ('takes_mix_level', models.PositiveSmallIntegerField(choices=[(0, 'Nieznane'), (1, 'Niższe'), (2, 'Niższe-Średnie'), (3, 'Średnie'), (4, 'Średnie-Wyższe'), (5, 'Wyższe')], default=0)),
                ('seed_norm_min', models.IntegerField(blank=True, null=True)),
                ('seed_norm_max', models.IntegerField(blank=True, null=True)),
                ('plant_type', models.PositiveSmallIntegerField(choices=[(0, 'Roczna'), (1, 'Dwuletnia'), (2, 'Wieloletnia')], default=0)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CropDataSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('descr', models.TextField(blank=True, null=True)),
                ('descr_pl', models.TextField(blank=True, null=True)),
                ('descr_en', models.TextField(blank=True, null=True)),
                ('pages_from', models.IntegerField(blank=True, null=True)),
                ('pages_to', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-from_crop', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CropDataString',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('part1', models.CharField(blank=True, max_length=500, null=True)),
                ('link', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='CropFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('name_pl', models.CharField(max_length=150, null=True)),
                ('name_en', models.CharField(max_length=150, null=True)),
                ('latin_name', models.CharField(blank=True, max_length=150, null=True)),
                ('culture', models.PositiveSmallIntegerField(choices=[(0, 'Nie Dotyczy'), (1, 'Poprawia Jakość Gleby'), (2, 'Pogarsza Jakość Gleby'), (3, 'Neutralna Dla Jakości Gleby')], default=3)),
                ('cooldown_min', models.IntegerField(blank=True, null=True)),
                ('cooldown_max', models.IntegerField(blank=True, null=True)),
                ('is_manurable', models.BooleanField(default=False)),
                ('culture_manured', models.PositiveSmallIntegerField(choices=[(0, 'Nie Dotyczy'), (1, 'Poprawia Jakość Gleby'), (2, 'Pogarsza Jakość Gleby'), (3, 'Neutralna Dla Jakości Gleby')], default=0)),
                ('is_mandatory_crop', models.BooleanField(default=False)),
                ('is_family_slave', models.BooleanField(default=False)),
                ('family_master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='family_subtype_set', to='rotator.cropfamily')),
                ('family_slaves', models.ManyToManyField(blank=True, related_name='family_slaves_set', to='rotator.CropFamily')),
            ],
            options={
                'verbose_name_plural': 'Crop Families',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CropInteraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('is_positive', models.BooleanField(default=True)),
                ('type_of_interaction', models.PositiveSmallIntegerField(choices=[(0, 'Współrzędne'), (1, 'Allelopatyczne'), (2, 'Następcze')], default=0)),
                ('season_of_interaction', models.PositiveSmallIntegerField(choices=[(0, 'Nie Dotyczy'), (1, 'Jare'), (2, 'Ozime')], default=0)),
                ('about_crop', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='crop_interaction_set', to='rotator.crop')),
                ('about_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='family_interaction_set', to='rotator.cropfamily')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='CropTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('name_pl', models.CharField(max_length=150, null=True)),
                ('name_en', models.CharField(max_length=150, null=True)),
                ('descr', models.CharField(blank=True, max_length=500, null=True)),
                ('descr_pl', models.CharField(blank=True, max_length=500, null=True)),
                ('descr_en', models.CharField(blank=True, max_length=500, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('is_featured', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CropBookString',
            fields=[
                ('cropdatastring_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rotator.cropdatastring')),
            ],
            options={
                'ordering': ['title'],
            },
            bases=('rotator.cropdatastring',),
        ),
        migrations.CreateModel(
            name='CropImageString',
            fields=[
                ('cropdatastring_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rotator.cropdatastring')),
            ],
            options={
                'ordering': ['title'],
            },
            bases=('rotator.cropdatastring',),
        ),
        migrations.CreateModel(
            name='CropsInteraction',
            fields=[
                ('cropinteraction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rotator.cropinteraction')),
            ],
            options={
                'ordering': ['title'],
            },
            bases=('rotator.cropinteraction',),
        ),
        migrations.CreateModel(
            name='FamilyInteraction',
            fields=[
                ('cropinteraction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rotator.cropinteraction')),
            ],
            options={
                'ordering': ['title'],
            },
            bases=('rotator.cropinteraction',),
        ),
        migrations.CreateModel(
            name='TagsInteraction',
            fields=[
                ('cropinteraction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rotator.cropinteraction')),
            ],
            options={
                'ordering': ['title'],
            },
            bases=('rotator.cropinteraction',),
        ),
        migrations.CreateModel(
            name='CropMix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('name_pl', models.CharField(max_length=150, null=True)),
                ('name_en', models.CharField(max_length=150, null=True)),
                ('descr', models.CharField(blank=True, max_length=500, null=True)),
                ('descr_pl', models.CharField(blank=True, max_length=500, null=True)),
                ('descr_en', models.CharField(blank=True, max_length=500, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('pubdate', models.DateTimeField(blank=True, null=True)),
                ('ingredients', models.ManyToManyField(blank=True, to='rotator.Crop')),
            ],
            options={
                'verbose_name_plural': 'Crop Mixes',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='cropinteraction',
            name='about_tag',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tag_interaction_set', to='rotator.croptag'),
        ),
        migrations.AddField(
            model_name='cropinteraction',
            name='info_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='info_source_set', to='rotator.cropdatasource'),
        ),
        migrations.AddField(
            model_name='cropdatasource',
            name='at_tag',
            field=models.ManyToManyField(blank=True, related_name='crop_source_tag_set', to='rotator.CropTag'),
        ),
        migrations.AddField(
            model_name='cropdatasource',
            name='from_crop',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='crop_source_set', to='rotator.crop'),
        ),
        migrations.AddField(
            model_name='crop',
            name='family',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='set_family', to='rotator.cropfamily'),
        ),
        migrations.AddField(
            model_name='crop',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='special_tags', to='rotator.CropTag'),
        ),
        migrations.AddField(
            model_name='croptag',
            name='crop_relationships',
            field=models.ManyToManyField(blank=True, related_name='known_tags_interactions', to='rotator.TagsInteraction'),
        ),
        migrations.AddField(
            model_name='cropfamily',
            name='family_relationships',
            field=models.ManyToManyField(blank=True, related_name='known_family_interactions', to='rotator.FamilyInteraction'),
        ),
        migrations.CreateModel(
            name='CropDataTagSource',
            fields=[
                ('cropdatasource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rotator.cropdatasource')),
                ('from_tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='crop_data_tag_source_set', to='rotator.croptag')),
            ],
            bases=('rotator.cropdatasource',),
        ),
        migrations.AddField(
            model_name='cropdatasource',
            name='at_data_string',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='crop_data_string_set', to='rotator.cropbookstring'),
        ),
        migrations.CreateModel(
            name='CropDataFamilySource',
            fields=[
                ('cropdatasource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rotator.cropdatasource')),
                ('from_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='crop_data_family_source_set', to='rotator.cropfamily')),
            ],
            bases=('rotator.cropdatasource',),
        ),
        migrations.AddField(
            model_name='crop',
            name='crop_relationships',
            field=models.ManyToManyField(blank=True, related_name='known_crops_interactions', to='rotator.CropsInteraction'),
        ),
        migrations.AddField(
            model_name='crop',
            name='image_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='set_image_cds', to='rotator.cropimagestring'),
        ),
    ]
